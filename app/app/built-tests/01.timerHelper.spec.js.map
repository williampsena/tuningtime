{"version":3,"names":[],"mappings":"","sources":["01.timerHelper.spec.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable */\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar timeInterval = 1000; // 1000 mili\nvar maxInterval = 4; // 4 sec\nvar waitInterval = 2; // 2 sec\n\nvar TIMERSTATUS = {\n  STARTED: 1,\n  WAITING: 2,\n  STOPPED: 3\n};\n\nvar ModelTimer = function () {\n  function ModelTimer(counter) {\n    _classCallCheck(this, ModelTimer);\n\n    this.counter = counter - 1; //Remove 1 counter because zero is not be considered in interval\n    this.status = TIMERSTATUS.STOPPED;\n    this.process = null;\n  }\n\n  _createClass(ModelTimer, [{\n    key: 'elapsed',\n    value: function elapsed(done, _elapsed) {\n      done = done || function () {};\n\n      console.log(_chalk2.default.green('Elapsed [counter = ' + this.counter + ']'));\n\n      if (_elapsed) {\n        _elapsed(this);\n      }\n\n      if (this.counter == 0) {\n        this.stop();\n        done();\n        return;\n      }\n\n      this.status = TIMERSTATUS.STARTED;\n      this.counter--;\n    }\n  }, {\n    key: 'start',\n    value: function start(args) {\n      args = args || {};\n      args.done = args.done || function () {};\n      args.elapsed = args.elapsed || function () {};\n\n      this.process = setInterval(this.elapsed.bind(this, args.done, args.elapsed), timeInterval);\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      console.log(_chalk2.default.red('Stopped'));\n\n      this.status = TIMERSTATUS.STOPPED;\n      clearInterval(this.process);\n      this.process = null;\n    }\n  }, {\n    key: 'wait',\n    value: function wait(args) {\n      console.log(_chalk2.default.yellow('Waiting [counter = ' + this.counter + ']'));\n\n      args = args || {};\n      args.done = args.done || function () {};\n      args.elapsed = args.elapsed || function () {};\n\n      this.process = setInterval(this.elapsed.bind(this, args.done, args.elapsed, TIMERSTATUS.WAITING), timeInterval);\n    }\n  }]);\n\n  return ModelTimer;\n}();\n\n;\n\n//\n// Timer process\n//\ndescribe('T1 - Timer helper', function () {\n  beforeEach(function () {});\n\n  it('T1.01 - As a user I want to start a new cycle', function (_done) {\n    var model = new ModelTimer(maxInterval, timeInterval);\n    model.start({\n      done: function done() {\n        return _done();\n      }\n    });\n  }).timeout(5000);\n\n  it('T1.02 - As a user I want start a new cycle and stop', function (done) {\n    var model = new ModelTimer(maxInterval, timeInterval);\n\n    model.start();\n\n    function cancelTimer() {\n      model.stop();\n      done();\n    }\n\n    cancelTimer.bind(undefined);\n\n    setTimeout(cancelTimer, 2000);\n  }).timeout(5000);\n\n  it('T1.03 - As a user I want start a new cycle, pause and stop', function (_done2) {\n    var model = new ModelTimer(maxInterval, timeInterval);\n\n    model.start({\n      done: function done() {\n        model.wait({\n          done: function done() {\n            return _done2();\n          }\n        });\n      }\n    });\n  }).timeout(10000);\n});"],"file":"01.timerHelper.spec.js","sourceRoot":"/source/"}