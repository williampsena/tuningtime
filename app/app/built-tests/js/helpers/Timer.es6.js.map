{"version":3,"names":[],"mappings":"","sources":["js/helpers/Timer.es6.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Timer = exports.TIMERSTATUS = exports.TIMERSTAGE = exports.TIMER_SETTINGS = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Session = require('./Session');\n\nvar _Task = require('../models/Task');\n\nvar _Task2 = _interopRequireDefault(_Task);\n\nvar _TaskLog = require('../models/TaskLog');\n\nvar _TaskLog2 = _interopRequireDefault(_TaskLog);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TIMER_SETTINGS = exports.TIMER_SETTINGS = {\n  interval: 1000, // 1000 mili\n  max: 10, // 4 sec\n  wait: 20 // 2 sec\n};\n\nvar TIMERSTAGE = exports.TIMERSTAGE = {\n  STARTED: 1,\n  WAITING: 2,\n  STOPPED: 3\n};\n\nvar TIMERSTATUS = exports.TIMERSTATUS = {\n  STARTED: 1,\n  STOPPED: 3,\n  PAUSED: 2\n};\n\nvar TIMER_SESSION_KEY = 'tuningtimer.currentTimer';\nvar TIMER_HISTORY_SESSION_KEY = 'tuningtimer.currentTimerHistory';\nvar TIMER_CYCLECOUNTER = 'tuningtimer.cycleCounter';\n\nvar Timer = function () {\n  function Timer(counter) {\n    _classCallCheck(this, Timer);\n\n    this.initialize(counter);\n  }\n\n  _createClass(Timer, [{\n    key: 'initialize',\n    value: function initialize(counter) {\n      this.maxCounter = counter;\n      this.counter = counter;\n      this.counterValue = 0;\n      this.status = TIMERSTATUS.STOPPED;\n      this.stage = TIMERSTAGE.STOPPED;\n      this.process = null;\n      this.isWaiting = false;\n      this.update();\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      this.remaing = this.formatTimer();\n    }\n  }, {\n    key: 'elapsed',\n    value: function elapsed(done, _elapsed, stage) {\n      done = done || function () {};\n\n      if (_elapsed) {\n        _elapsed(this);\n      }\n\n      if (this.counter == 0) {\n        this.stop();\n        done();\n        done = function done() {};\n        return;\n      }\n\n      this.stage = stage;\n      this.counter--;\n      this.counterValue = this.maxCounter - this.counter;\n      this.update();\n    }\n  }, {\n    key: 'start',\n    value: function start(args) {\n      this.isWaiting = false;\n\n      args = args || {};\n      args.done = args.done || function () {};\n      args.elapsed = args.elapsed || function () {};\n      args.counter = args.counter || TIMER_SETTINGS.max;\n\n      this.counter = args.counter;\n      this.maxCounter = this.counter;\n      this.counterValue = 0;\n      this.update();\n\n      this.process = setInterval(this.elapsed.bind(this, args.done, args.elapsed, TIMERSTAGE.STARTED), TIMER_SETTINGS.interval);\n      this.stage = TIMERSTAGE.STARTED;\n      this.status = TIMERSTATUS.STARTED;\n\n      this.listenPlayAudio();\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this.status = TIMERSTATUS.STOPPED;\n      this.stage = TIMERSTAGE.STOPPED;\n      clearInterval(this.process);\n      this.process = null;\n      this.counter = this.maxCounter;\n      this.counterValue = 0;\n      this.update();\n      this.removeCurrentTimer();\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.status = TIMERSTATUS.PAUSED;\n      clearInterval(this.process);\n      this.process = null;\n    }\n  }, {\n    key: 'wait',\n    value: function wait(args) {\n      args = args || {};\n      args.done = args.done || function () {};\n      args.elapsed = args.elapsed || function () {};\n      args.counter = args.counter || TIMER_SETTINGS.wait;\n\n      this.counter = args.counter;\n      this.maxCounter = this.counter;\n      this.counterValue = 0;\n      this.update();\n\n      this.process = setInterval(this.elapsed.bind(this, args.done, args.elapsed, TIMERSTAGE.WAITING), TIMER_SETTINGS.interval);\n      this.stage = TIMERSTAGE.WAITING;\n      this.status = TIMERSTATUS.STARTED;\n\n      this.listenWaitAudio();\n    }\n  }, {\n    key: 'setCurrentTimer',\n    value: function setCurrentTimer() {\n      _Session.SessionLocalHelper.create(TIMER_SESSION_KEY, this);\n    }\n  }, {\n    key: 'removeCurrentTimer',\n    value: function removeCurrentTimer() {\n      _Session.SessionLocalHelper.remove(TIMER_SESSION_KEY);\n    }\n  }, {\n    key: 'getCurrentTimer',\n    value: function getCurrentTimer() {\n      var timer;\n      var timerSession = _Session.SessionLocalHelper.get(TIMER_SESSION_KEY);\n\n      if (timerSession) {\n        timer = new Timer(timerSession.counter);\n        timer.stage = timerSession.stage;\n        timer.status = timerSession.status;\n      }\n\n      return timer;\n    }\n  }, {\n    key: 'setCurrentTimerHistory',\n    value: function setCurrentTimerHistory(model) {\n      _Session.SessionLocalHelper.create(TIMER_HISTORY_SESSION_KEY, model);\n    }\n  }, {\n    key: 'removeCurrentTimerHistory',\n    value: function removeCurrentTimerHistory() {\n      _Session.SessionLocalHelper.remove(TIMER_HISTORY_SESSION_KEY);\n    }\n  }, {\n    key: 'getCurrentTimerHistory',\n    value: function getCurrentTimerHistory() {\n      var timerHistory = _Session.SessionLocalHelper.get(TIMER_HISTORY_SESSION_KEY);\n\n      if (!timerHistory) {\n        timerHistory = new _TaskLog2.default();\n      }\n\n      return timerHistory;\n    }\n  }, {\n    key: 'formatTimer',\n    value: function formatTimer() {\n      var pad = \"00\";\n      var minutes = String(Math.trunc(this.counter / 60));\n      var seconds = String(Math.round(this.counter % 60, 2));\n\n      minutes = pad.substring(0, pad.length - minutes.length) + minutes;\n      seconds = pad.substring(0, pad.length - seconds.length) + seconds;\n\n      return minutes.concat(\":\", seconds);\n    }\n  }, {\n    key: 'toMinutes',\n    value: function toMinutes(counter) {\n      counter = counter || this.maxCounter || this.counter;\n\n      var minutes = String(Math.round(counter / 60, 2));\n      return minutes;\n    }\n  }, {\n    key: 'listenPlayAudio',\n    value: function listenPlayAudio() {\n      this.listenAudio('play', 0.2);\n    }\n  }, {\n    key: 'listenWaitAudio',\n    value: function listenWaitAudio() {\n      this.listenAudio('wait', 1);\n    }\n  }, {\n    key: 'listenAudio',\n    value: function listenAudio(audio, vol) {\n      var audio = new Audio('audio/' + audio + '.mp3');\n      audio.volume = vol || 0.2;\n      audio.currentTime = 0;\n      audio.play();\n    }\n  }, {\n    key: 'getCycleCounter',\n    value: function getCycleCounter() {\n      return parseInt(_Session.SessionHelper.get(TIMER_CYCLECOUNTER)) || 0;\n    }\n  }, {\n    key: 'incrementCycleCounter',\n    value: function incrementCycleCounter() {\n      var counter = this.getCycleCounter();\n\n      counter = counter + 1;\n\n      _Session.SessionHelper.create(TIMER_CYCLECOUNTER, String(counter));\n    }\n  }, {\n    key: 'setCycleCounter',\n    value: function setCycleCounter(counter) {\n      if (typeof counter === \"number\") {\n        console.log(String(counter));\n\n        _Session.SessionHelper.create(TIMER_CYCLECOUNTER, String(counter));\n      }\n    }\n  }]);\n\n  return Timer;\n}();\n\nexports.Timer = Timer;\n;"],"file":"js/helpers/Timer.es6.js","sourceRoot":"/source/"}