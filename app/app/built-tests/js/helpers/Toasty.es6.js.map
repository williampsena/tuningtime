{"version":3,"names":[],"mappings":"","sources":["js/helpers/Toasty.es6.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Toasty = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _electron = require('electron');\n\nvar _electron2 = _interopRequireDefault(_electron);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable */\nvar _require$remote = require('electron').remote;\n\nvar BrowserWindow = _require$remote.BrowserWindow;\nvar electronScreen = _require$remote.screen;\nvar _electronScreen$getPr = electronScreen.getPrimaryDisplay().size;\nvar width = _electronScreen$getPr.width;\nvar height = _electronScreen$getPr.height;\n\nvar app = require('electron').remote.app;\n\nvar toastyWindow = void 0;\n\nvar toastyWidth = 200;\nvar toastyHeight = 200;\nvar x = width - (toastyWidth + 50);\nvar y = height - (toastyHeight + 50);\n\nvar Toasty = exports.Toasty = function () {\n  function Toasty() {\n    _classCallCheck(this, Toasty);\n  }\n\n  _createClass(Toasty, null, [{\n    key: 'load',\n    value: function load(imageType) {\n      this.closeWindow();\n\n      if (toastyWindow) {\n        toastyWindow.reload();\n        toastyWindow.hide();\n      } else {\n        toastyWindow = new BrowserWindow({\n          width: toastyWidth,\n          height: toastyHeight,\n          x: x,\n          y: y,\n          frame: false,\n          movable: false,\n          minimizable: false,\n          maximizable: false,\n          alwaysOnTop: true\n        });\n\n        console.log('file://' + app.getAppPath() + '/main.html#/toasty?imageType=' + imageType);\n        toastyWindow.loadURL('file://' + app.getAppPath() + '/main.html#/toasty?imageType=' + imageType);\n      }\n\n      Toasty.animate(6);\n      Toasty.close(7);\n    }\n  }, {\n    key: 'animate',\n    value: function animate(timeout) {\n      timeout = timeout || 0;\n      var timeoutMs = timeout * 1000;\n\n      setTimeout(function () {\n        Toasty.close();\n      }, timeoutMs);\n    }\n  }, {\n    key: 'close',\n    value: function close(timeout) {\n      timeout = timeout || 0;\n      var timeoutMs = timeout * 1000;\n\n      if (toastyWindow) {\n        setTimeout(function () {\n          if (toastyWindow) {\n            toastyWindow.destroy();\n            toastyWindow = undefined;\n          }\n        }, timeoutMs);\n      }\n    }\n  }, {\n    key: 'closeWindow',\n    value: function closeWindow(id) {\n      var windows = BrowserWindow.getAllWindows();\n      windows.shift();\n\n      windows.forEach(function (w) {\n        return w.close();\n      });\n    }\n  }]);\n\n  return Toasty;\n}();\n\n;"],"file":"js/helpers/Toasty.es6.js","sourceRoot":"/source/"}