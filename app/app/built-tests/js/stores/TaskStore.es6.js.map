{"version":3,"names":[],"mappings":"","sources":["js/stores/TaskStore.es6.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TaskStore = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nvar _BaseStore2 = require('./BaseStore');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TaskStore = exports.TaskStore = function (_BaseStore) {\n  _inherits(TaskStore, _BaseStore);\n\n  function TaskStore(databases) {\n    _classCallCheck(this, TaskStore);\n\n    return _possibleConstructorReturn(this, (TaskStore.__proto__ || Object.getPrototypeOf(TaskStore)).call(this, databases, 'task'));\n  }\n\n  _createClass(TaskStore, [{\n    key: 'findByContent',\n    value: function findByContent(name, completed, limit) {\n      if (typeof completed !== \"boolean\") {\n        completed = false;\n      }\n\n      var query = this.db.where('name').startsWithIgnoreCase(name).filter(function (x) {\n        return x.completed === completed;\n      });\n\n      if (typeof limit == \"number\") {\n        query = query.limit(limit);\n      }\n\n      return query.toArray().catch(function (err) {\n        throw err;\n      });\n    }\n  }]);\n\n  return TaskStore;\n}(_BaseStore2.BaseStore);"],"file":"js/stores/TaskStore.es6.js","sourceRoot":"/source/"}