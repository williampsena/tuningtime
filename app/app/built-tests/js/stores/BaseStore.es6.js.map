{"version":3,"names":[],"mappings":"","sources":["js/stores/BaseStore.es6.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseStore = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BaseStore = exports.BaseStore = function () {\n  function BaseStore(db, dbContextName) {\n    _classCallCheck(this, BaseStore);\n\n    this.dbContext = db;\n    this.db = db[dbContextName];\n  }\n\n  _createClass(BaseStore, [{\n    key: 'transaction',\n    value: function transaction() {\n      return this.dbContext.transaction.apply(this, arguments);\n    }\n  }, {\n    key: 'count',\n    value: function count() {\n      return this.db.count().catch(function (err) {\n        throw err;\n      });\n    }\n  }, {\n    key: 'first',\n    value: function first() {\n      return this.db.toCollection().first().catch(function (err) {\n        throw err;\n      });\n    }\n  }, {\n    key: 'all',\n    value: function all() {\n      return this.db.toCollection().toArray().catch(function (err) {\n        throw err;\n      });\n    }\n  }, {\n    key: 'get',\n    value: function get(id) {\n      return this.db.filter(function (x) {\n        return x.id === id;\n      }).toArray().catch(function (err) {\n        throw err;\n      });\n    }\n  }, {\n    key: 'create',\n    value: function create(model) {\n      delete model.id;\n\n      return this.db.add(model).catch(function (err) {\n        throw err;\n      }).then(function () {\n        return model;\n      });\n    }\n  }, {\n    key: 'update',\n    value: function update(model) {\n      var id = model.id;\n\n      delete model.id;\n\n      return this.db.update(id, model).catch(function (err) {\n        throw err;\n      }).then(function () {\n        model.id = id;\n        return model;\n      });\n    }\n  }, {\n    key: 'remove',\n    value: function remove(id) {\n      return this.db.delete(id).catch(function (err) {\n        throw err;\n      });\n    }\n  }, {\n    key: 'removeAll',\n    value: function removeAll() {\n      return this.db.clear().catch(function (err) {\n        throw err;\n      });\n    }\n  }]);\n\n  return BaseStore;\n}();"],"file":"js/stores/BaseStore.es6.js","sourceRoot":"/source/"}